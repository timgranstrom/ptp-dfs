syntax = "proto3";

package protoMessages;

//Common wrapper for all 4 types of messages
message WrapperMessage {
	MessageType message_type = 1; //To know what type of message it contains
	int64 request_id = 2; //Id of the request the message is relevant for
	string sender_kademlia_id = 3; //For the receiver to save in their routing table
	bool is_reply = 4; //Denotes if a message is a request or a reply to a request
	// messages { //Type-of-message-specific header, only one can be used
		PingMessage msg_1 = 5;
		LookupContactMessage msg_2 = 6;
		LookupDataMessage msg_3 = 7;
		StoreMessage msg_4 = 8;
	//}
}
    //Enum For Message Types
	enum MessageType {
		PING = 0;
		FIND_CONTACT = 1;
		FIND_DATA = 2;
		SEND_STORE = 3;
	}

//Sub-header to ping a contact
message PingMessage { }

//Sub-header to find contacts, returns a "list" of contacts
message LookupContactMessage {
	string kademlia_target_id = 9; //Id of target node
	repeated ProtoContact contacts = 10; //For replying with own closest contacts
}

//Protobuf representation of Contact.go
message ProtoContact {
	string kademlia_id = 11; //Position of node in the tree
	string address = 12; //IP address for direct contact to the node
}

//Sub-header to find data with a certain id, returns closer contacts if it wasn't found
message LookupDataMessage {
	string kademlia_target_id = 13; //Id of target data
	bool found_file = 14; //If file were found or not, only for replies
	string file_data = 15; //If file were found, return the data
	repeated ProtoContact contacts = 16; //If file wasn't found, return closer contacts
}

//Sub-header to share where a nodes shared data can be found
message StoreMessage {
	string key_store = 17; //Key should be kademliaID
	string value_store = 18; //Value should be IP Address of node holding
	//string life_time = 3; //Duration/amount of time that the data should stay be stored
	//bool republish_request = 3;
}